function results = testImport()

% ---------------------------------------
% Variables
% ---------------------------------------
results.name = 'import';
results.pass = 0;
results.fail = 0;

srcPath  = fileparts(fileparts(mfilename('fullpath')));
dataPath = [srcPath, filesep, 'examples', filesep, 'data'];

% ---------------------------------------
% Files
% ---------------------------------------
agilentPath = [dataPath, filesep, 'agilent'];

agilentFiles = {...
    '002-GC-MS.D',...
    '008-GC-FID.D',...
    '081-GC-FID.D',...
    '179-GC-FID.D',...
    '181-GC-FID.D',...
    '030-LC-DAD.D',...
    '031-LC-DAD.D',...
    '130-LC-DAD.D',...
    '131-LC-DAD.D'
};

agilentFields = {...
    'file_path',...
    'file_name',...
    'file_size',...
    'sample_name',...
    'barcode',...
    'operator',...
    'datetime',...
    'instrument',....
    'inlet',...
    'instmodel',...
    'method_name',...
    'seqindex',...
    'vial',...
    'replicate',...
    'sampling_rate',...
    'time',....
    'intensity',...  
    'channel',....
    'time_units',...
    'intensity_units',...
    'channel_units'....
};

cdfPath = [dataPath, filesep, 'netcdf'];

cdfFiles = {...
    'agilent-ms.cdf',...
    'finnigan-ms.cdf',...
    'hp-ms.cdf',...
    'kratos-ms.cdf',...
    'sciex-ms.cdf'...
};

cdfFields = {...
    'file_path',...
    'file_name',...
    'file_size',...
    'dataset_completeness',...
    'netcdf_revision',...
    'ms_template_revision',....
    'experiment_date_time_stamp',...
    'netcdf_file_date_time_stamp',...
    'instrument_name',...
    'experiment_type',...
    'raw_data_mass_format',...
    'raw_data_intensity_format',...
    'scan_index',...
    'point_count',...
    'mass_values',...
    'intensity_values',...
    'total_intensity'...
};

nistPath = [dataPath, filesep, 'nist'];

nistFiles = {...
    '85-01-8.MSP',...
    '112-61-8.MSP',...
    '423-38-1.MSP',...
    '544-64-9.MSP',...
    '7116-95-2.MSP'...
};

nistFields = {...
    'file_path',...
    'file_name',...
    'file_size',...
    'compound_name',...
    'compound_formula',...
    'compound_mw',....
    'cas_id',...
    'nist_id',...
    'db_id',...
    'comments',...
    'num_peaks',...
    'mz',...
    'intensity'...
};

% ---------------------------------------
% Intro
% ---------------------------------------
fprintf(['\n', repmat('-',1,50), '\n']);
fprintf('Import Functions');
fprintf(['\n', repmat('-',1,50), '\n']);

% ---------------------------------------
% Agilent
% ---------------------------------------
fprintf(['\n', 'ImportAgilent (Input)', '\n']);
results = testInput('agilent', agilentPath, agilentFiles, results);

fprintf(['\n', 'ImportAgilent (Output)', '\n']);
results = testOutput('agilent', agilentPath, agilentFields, results);

% ---------------------------------------
% netCDF
% ---------------------------------------
fprintf(['\n', 'ImportCDF (Input)', '\n']);
results = testInput('netcdf', cdfPath, cdfFiles, results);

fprintf(['\n', 'ImportCDF (Output)', '\n']);
results = testOutput('netcdf', cdfPath, cdfFields, results);

% ---------------------------------------
% NIST
% ---------------------------------------
fprintf(['\n', 'ImportNIST (Input)', '\n']);
results = testInput('nist', nistPath, nistFiles, results);

fprintf(['\n', 'ImportNIST (Output)', '\n']);
results = testOutput('nist', nistPath, nistFields, results);

% ---------------------------------------
% Summary
% ---------------------------------------
fprintf(['\n', '--------------', '\n']);
fprintf(['  <strong>PASS</strong> = ', num2str(results.pass), '\n']);
fprintf(2,'  FAIL ');
fprintf(['= ', num2str(results.fail)]);
fprintf(['\n', '--------------', '\n\n']);

end

% ---------------------------------------
% Input Test
% ---------------------------------------
function results = testInput(functionName, filePath, fileName, results)

for i = 1:length(fileName)
    
    switch functionName
    
        case 'agilent'
            
            data = ImportAgilent(...
                'file', [filePath, filesep, fileName{i}],...
                'verbose', 'off');
            
            switch fileName{i}(1:3)
                case {'002'}
                    str = ['.MS (', fileName{i}(1:3), ')'];
                case {'008', '081', '179', '181', '030', '130'}
                    str = ['.CH (', fileName{i}(1:3), ')'];
                case {'031', '131'}
                    str = ['.UV (', fileName{i}(1:3), ')'];
            end
            
        case 'nist'
            
            data = ImportNIST(...
                'file', [filePath, filesep, fileName{i}],...
                'verbose', 'off');
            
            str = ['.MSP (', num2str(i), ')'];
            
        case 'netcdf'
            
            data = ImportCDF(...
                'file', [filePath, filesep, fileName{i}],...
                'verbose', 'off');
            
            str = ['.CDF (', num2str(i), ')'];
            
    end
    
    switch functionName
        
        case {'agilent'}
            
            if ~isempty(data.time) && ~isempty(data.intensity)
                results = parseresults('pass', str, results);
            else
                results = parseresults('fail', str, results);
            end
            
        case {'nist', 'netcdf'}
    
            if ~isempty(data) && length(fields(data)) > 3
                results = parseresults('pass', str, results);
            else
                results = parseresults('fail', str, results);
            end
            
    end
    
end

end

% ---------------------------------------
% Output Test
% ---------------------------------------
function results = testOutput(functionName, filePath, fileFields, results)

switch functionName
    
    case 'agilent'

        data = ImportAgilent(...
            'file', filePath,...
            'depth', 3,...
            'verbose', 'off');
        
    case 'nist'
        
        data = ImportNIST(...
            'file', filePath,...
            'depth', 3,...
            'verbose', 'off');
        
    case 'netcdf'

        data = ImportCDF(...
            'file', filePath,...
            'depth', 3,...
            'verbose', 'off');
        
end

for i = 1:length(fileFields)
    
    str = ['data.', fileFields{i}];
    
    if ~isfield(data, fileFields{i})
        results = parseresults('fail', str, results);
        
    elseif ~all(cellfun(@isempty, {data.(fileFields{i})}))
        results = parseresults('pass', str, results);
        
    else
        results = parseresults('fail', str, results);
    end
    
end

end

% ---------------------------------------
% Display results
% ---------------------------------------
function results = parseresults(x, str, results)

switch x
    
    case 'pass'
        fprintf('  <strong>PASS</strong>  ');
        fprintf([str, '\n']);
        results.pass = results.pass + 1;
        
    case 'fail'
        fprintf(2, '  FAIL  ');
        fprintf([str, '\n']);
        results.fail = results.fail + 1;
        
end
   
end